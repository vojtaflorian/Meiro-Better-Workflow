// ==UserScript==
// @name         Meiro Better Workflow
// @namespace    http://tampermonkey.net/
// @version      2025-07-16
// @description  Meiro Better Workflow - fixed sort button functionality
// @author       Vojta Florian
// @match        *.meiro.io/*
// @match        *.meiro.io/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=meiro.io
// @downloadURL  https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @updateURL    https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // Global storage for cleanup
    let activeIntervals = [];

    // Cleanup on page unload to prevent memory leaks
    window.addEventListener('beforeunload', () => {
        console.log('üîí Meiro Better WF [CLEANUP]: Cleaning up all intervals on page unload');
        activeIntervals.forEach(id => clearInterval(id));
        activeIntervals = [];
    });

    //***********************************************************
    // SORTING FUNCTIONALITY - Automatic sorting on lists by last modified
    function clickSortButton() {
        console.log("üîÑ Meiro Better WF [SORT]: Searching for Modified button...");

        // Find buttons containing "Modified" text or similar
        const allButtons = document.querySelectorAll('button');
        console.log(`üîÑ Meiro Better WF [SORT]: Found ${allButtons.length} buttons total`);

        // Search for button containing "Modified" in text
        let targetButton = null;
        const searchTerms = ['modified', 'upraveno', 'zmƒõnƒõno', 'modified at'];

        allButtons.forEach((btn, index) => {
            const text = btn.textContent.trim().toLowerCase();
            console.log(`üîÑ Meiro Better WF [SORT]: Button ${index}: "${btn.textContent.trim()}"`);

            // Check if contains searched text
            if (searchTerms.some(term => text.includes(term))) {
                targetButton = btn;
                console.log(`‚úÖ Meiro Better WF [SORT]: Found sort button: "${btn.textContent.trim()}"`);
            }
        });

        if (targetButton) {
            console.log(`üîÑ Meiro Better WF [SORT]: Clicking on button: "${targetButton.textContent.trim()}"`);

            try {
                // First click to change sorting
                targetButton.click();
                console.log("‚úÖ Meiro Better WF [SORT]: First click executed");

                // Second click after short pause for correct order (newest on top)
                setTimeout(() => {
                    targetButton.click();
                    console.log("‚úÖ Meiro Better WF [SORT]: Second click executed - sorting by newest");
                }, 300);

                return true; // Success, stop searching
            } catch (error) {
                console.error("‚ùå Meiro Better WF [SORT]: Error during clicking:", error);
                return false;
            }
        } else {
            console.log("‚ö†Ô∏è Meiro Better WF [SORT]: Modified button not found");
            return false; // Continue searching
        }
    }

    // Enhanced observer with repeated searching
    function setupSortObserver() {
        console.log("üîÑ Meiro Better WF [SORT]: Setting up sort observer");
        let attempts = 0;
        const maxAttempts = 20; // Maximum 20 attempts (10 seconds)
        let searchInterval;

        function searchForSortButton() {
            attempts++;
            console.log(`üîÑ Meiro Better WF [SORT]: Attempt ${attempts}/${maxAttempts} - searching for sort buttons`);

            const success = clickSortButton();

            if (success) {
                console.log("‚úÖ Meiro Better WF [SORT]: Sort button successfully found and clicked");
                clearInterval(searchInterval);
                const index = activeIntervals.indexOf(searchInterval);
                if (index > -1) activeIntervals.splice(index, 1);
            } else if (attempts >= maxAttempts) {
                console.log("‚ö†Ô∏è Meiro Better WF [SORT]: Maximum attempts reached, stopping search");
                clearInterval(searchInterval);
                const index = activeIntervals.indexOf(searchInterval);
                if (index > -1) activeIntervals.splice(index, 1);
            }
        }

        // Start searching after short delay
        setTimeout(() => {
            searchInterval = setInterval(searchForSortButton, 500);
            activeIntervals.push(searchInterval);

            // First attempt immediately
            searchForSortButton();
        }, 1000);
    }

    // Run setup after page load
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log("‚úÖ Meiro Better WF [SORT]: DOMContentLoaded detected, setting up sort observer");
            setupSortObserver();
        });
    } else {
        console.log("‚úÖ Meiro Better WF [SORT]: Document already loaded, setting up sort observer");
        setupSortObserver();
    }

    //***********************************************************
    // FORM FILLING - Dynamic filling of Send to and Profile ID in Campaigns
    const onCampaignPage = window.location.href.includes("meiro.io/channels/emails/campaigns");
    if (!onCampaignPage) {
        console.log('üîí Meiro Better WF [FORM]: Not starting Send to and Profile ID part ‚Äì URL does not match');
    }
    if (onCampaignPage) {
        console.log('‚úÖ Meiro Better WF [FORM]: Campaign page detected, initializing form filling');
        let userEmail = null;
        const profileIDToFill = "00059461-1b48-f552-3d8c-9f0422f5aef8"; // Profile ID for prefilling in Campaigns

        function getUserEmail() {
            console.log("üîç Meiro Better WF [FORM]: Getting user email");
            let userMenu = document.querySelector("[data-testid='user-menu']");
            if (userMenu) {
                console.log("‚úÖ Meiro Better WF [FORM]: User menu found, clicking to open");
                userMenu.click(); // Open user menu
                setTimeout(() => {
                    let emailElement = document.querySelector(".clYaW"); // Search for user email
                    if (emailElement) {
                        userEmail = emailElement.textContent.trim();
                        console.log("‚úÖ Meiro Better WF [FORM]: Found user email:", userEmail);
                        fillForm(); // Fill form
                    } else {
                        console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Email element not found");
                    }
                }, 500);
            } else {
                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: User menu not found");
            }
        }

        function simulateReactSelect(input, value) {
            console.log(`üîÑ Meiro Better WF [FORM]: Simulating React select with value: ${value}`);
            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
            nativeInputValueSetter.call(input, value);
            input.dispatchEvent(new Event("input", { bubbles: true }));
            input.dispatchEvent(new Event("change", { bubbles: true }));
        }

        function fillForm() {
            if (!userEmail) {
                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Waiting for user email...");
                return;
            }

            console.log("üîÑ Meiro Better WF [FORM]: Filling email:", userEmail);

            // Find email select field
            let emailContainer = document.querySelector("[data-testid='send-test-emails-select']");
            if (emailContainer) {
                console.log("‚úÖ Meiro Better WF [FORM]: Email container found");
                let emailInput = emailContainer.querySelector(".react-select-redux-field__input input");
                if (emailInput && emailInput.value === "") {
                    console.log("üîÑ Meiro Better WF [FORM]: Clicking on email input...");
                    emailInput.focus();
                    simulateReactSelect(emailInput, userEmail);

                    setTimeout(() => {
                        let dropdownMenu = document.querySelector(".react-select-redux-field__menu");
                        if (dropdownMenu) {
                            console.log("‚úÖ Meiro Better WF [FORM]: Dropdown menu found");
                            let addEmailOption = dropdownMenu.querySelector("[data-testid='select-field-option']");
                            if (addEmailOption && addEmailOption.textContent.includes(userEmail)) {
                                console.log("‚úÖ Meiro Better WF [FORM]: Clicking on add email option:", userEmail);
                                addEmailOption.click();
                            } else {
                                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Add email option not found");
                            }
                        } else {
                            console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Dropdown menu not found");
                        }
                    }, 500);
                } else {
                    console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Email input not found or already filled");
                }
            } else {
                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Email container not found");
            }

            // Find Profile ID input and fill it correctly
            let profileInput = document.querySelector("input[data-testid='send-test-emails-profile-id']");
            if (profileInput && profileInput.value !== profileIDToFill) {
                console.log("üîÑ Meiro Better WF [FORM]: Filling Profile ID...");
                simulateReactSelect(profileInput, profileIDToFill);
            } else if (profileInput) {
                console.log("‚úÖ Meiro Better WF [FORM]: Profile ID already filled correctly");
            } else {
                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Profile ID input not found");
            }
        }

        // After page load try to get email
        setTimeout(() => {
            console.log("üîÑ Meiro Better WF [FORM]: Starting user email retrieval");
            getUserEmail();
        }, 1000);

        // Improved interval with max attempts to prevent infinite polling
        let attempts = 0;
        let checkInterval = setInterval(() => {
            attempts++;
            console.log(`üîÑ Meiro Better WF [FORM]: Form fill attempt ${attempts}/30`);
            fillForm();
            if (document.querySelector(".react-select-redux-field__multi-value") &&
                document.querySelector("input[data-testid='send-test-emails-profile-id']").value === profileIDToFill) {
                clearInterval(checkInterval);
                console.log("‚úÖ Meiro Better WF [FORM]: Form successfully filled");
            } else if (attempts > 30) { // Stop after 30 seconds
                clearInterval(checkInterval);
                console.log("‚ö†Ô∏è Meiro Better WF [FORM]: Timeout while filling form");
            }
        }, 1000);
        activeIntervals.push(checkInterval);
    }

    //***********************************************************
    // SIZE MONITOR - Function for monitoring textarea element and calculating editor content size
    function monitorTextarea() {
        // Check if current URL contains required path
        if (!window.location.href.includes("meiro.io/channels/emails/campaigns")) {
            console.log('üîí Meiro Better WF [SIZE]: HTML size script not running, URL does not match required pattern');
            return; // Script won't run if URL doesn't match
        }

        console.log("üîç Meiro Better WF [SIZE]: Textarea monitoring function started...");

        const textareaElement = document.querySelector('textarea.ace_text-input');
        let sizeDisplayElement = document.getElementById('size-display');
        
        if (textareaElement) {
            console.log("‚úÖ Meiro Better WF [SIZE]: Textarea element found");
            // Find nearest Ace Editor
            const aceEditorElement = textareaElement.closest('.ace_editor');
            let textContent = '';
            let sizeInBytes = 0;

            if (aceEditorElement && window.ace) {
                // Get Ace Editor instance
                const aceEditor = window.ace.edit(aceEditorElement);
                
                // Get complete editor content
                textContent = aceEditor.getValue();
                console.log(`‚úÖ Meiro Better WF [SIZE]: Ace Editor found and content retrieved`);
            } else {
                console.log('‚ö†Ô∏è Meiro Better WF [SIZE]: Ace Editor not found, calculating textarea only');
                textContent = textareaElement.value;
            }

            // Calculate size in bytes using TextEncoder (UTF-8) with fallback
            if (textContent.length > 0) {
                try {
                    sizeInBytes = new TextEncoder().encode(textContent).length;
                } catch (e) {
                    // Fallback for older browsers
                    sizeInBytes = textContent.length * 2; // UTF-8 approximation
                    console.log('‚ö†Ô∏è Meiro Better WF [SIZE]: Using fallback method for size calculation');
                }
            }

            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            
            // Only create/show element if content size is greater than 0
            if (sizeInBytes > 0) {
                // Create new div for size display if it doesn't exist yet
                if (!sizeDisplayElement) {
                    console.log("üîÑ Meiro Better WF [SIZE]: Creating size display element");
                    sizeDisplayElement = document.createElement('div');
                    sizeDisplayElement.id = 'size-display';
                    sizeDisplayElement.style.position = 'fixed';
                    sizeDisplayElement.style.bottom = '10px';
                    sizeDisplayElement.style.right = '10px';
                    sizeDisplayElement.style.padding = '10px';
                    sizeDisplayElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
                    sizeDisplayElement.style.color = 'white';
                    sizeDisplayElement.style.borderRadius = '5px';
                    sizeDisplayElement.style.fontSize = '14px';
                    sizeDisplayElement.style.zIndex = '10000';
                    document.body.appendChild(sizeDisplayElement); // Add div to page
                }
                
                // Show element and update content
                sizeDisplayElement.style.display = 'block';
                sizeDisplayElement.innerHTML = `Velikost obsahu: ${sizeInKB} KB`;
                console.log(`‚úÖ Meiro Better WF [SIZE]: Content size displayed: ${sizeInKB} KB`);
            } else {
                // Hide element if content is empty
                if (sizeDisplayElement) {
                    sizeDisplayElement.style.display = 'none';
                    console.log('‚úÖ Meiro Better WF [SIZE]: Content is empty, hiding size display');
                }
            }
        } else {
            console.log('‚ö†Ô∏è Meiro Better WF [SIZE]: Textarea not found');
            // Hide element if textarea is not found
            if (sizeDisplayElement) {
                sizeDisplayElement.style.display = 'none';
            }
        }
    }

    // Start monitoring with cleanup tracking
    console.log("üîÑ Meiro Better WF [SIZE]: Starting textarea monitoring interval");
    const monitorInterval = setInterval(monitorTextarea, 3000);
    activeIntervals.push(monitorInterval);

    //***********************************************************
    // STYLES - Function for applying styles
    function addStyles() {
        console.log("üé® Meiro Better WF [STYLES]: Adding styles...");

        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = `
        @media (max-width: 1250px) {
            .dyn_width_small div div section{
                max-width: 90% !important;
                width: 90% !important;
            }
        }

        @media (min-width: 1320px) {
            .dyn_width_large div div section{
                min-width: 95% !important;
            }
        }

        .max-width-92 { min-width: 92% !important; }
        .max-width-89 { min-width: 89% !important; }

        .flex-730 { flex: 0 0 730px; }
        .flex-500 { flex: 0 0 500px; }
        .TextInput_wrapper__6i7yo .TextInput_row__J20k3 .TextInput_warningWrapper__20GtL {
            min-width: 450px !important;
        }
        .width-auto-content { width: -webkit-fill-available; max-width: -webkit-fill-available; }
        .EmailEditor_emailEditor__18vqj { width: auto !important; }
        .wrapper { max-width: 1600px !important; }
        .files .scrollable.files-content {
            max-height: 350px !important;
        }
        /*aktivni*/
        .width-fill-content { width: -webkit-fill-available !important; max-width: -webkit-fill-available !important; flex: auto !important;}
        .width-auto { width: auto !important;}
        .flex-auto { flex: auto !important; }
    `;
        document.head.appendChild(style);
        console.log("‚úÖ Meiro Better WF [STYLES]: Styles successfully added");
    }

    // Function for adding new classes
    function addClasses() {
        console.log("üîç Meiro Better WF [STYLES]: Searching for elements to add classes...");

        const classMap = {
            'content-wrap': ['width-fill-content'],
            'sm6GI': ['width-fill-content'], // segments
            '_9rPmH': ['width-fill-content'], // segments
            'ENn0I': ['width-fill-content'], // channels header
            '_748bX': ['width-fill-content'], // popup-banners header
            'yHmIT': ['width-fill-content'], // channels/emails/campaigns header
            'box-border': ['width-auto']
        };

        let elementsUpdated = 0;

        Object.entries(classMap).forEach(([targetClass, newClasses]) => {
            document.querySelectorAll('.' + targetClass).forEach(element => {
                newClasses.forEach(newClass => {
                    if (!element.classList.contains(newClass)) {
                        element.classList.add(newClass);
                        elementsUpdated++;
                    }
                });
            });
        });

        console.log(`‚úÖ Meiro Better WF [STYLES]: Classes added to ${elementsUpdated} elements`);
    }

    // Ensure script runs after page load
    (function init() {
        console.log("üöÄ Meiro Better WF [STYLES]: Starting style script...");

        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", () => {
                console.log("‚úÖ Meiro Better WF [STYLES]: DOMContentLoaded detected");
                addStyles();
                addClasses();
            });
        } else {
            console.log("‚úÖ Meiro Better WF [STYLES]: Document already loaded, executing actions");
            addStyles();
            addClasses();
        }
    })();

    // Watch for DOM changes and apply classes to newly added elements
    const observer2 = new MutationObserver(() => {
        console.log("üîÑ Meiro Better WF [STYLES]: DOM change detected, reapplying classes...");
        addClasses();
    });

    observer2.observe(document.body, { childList: true, subtree: true });

    //***********************************************************
    // DELETE BUTTON - CTA DELETE button in popup, always active for "enter"
    (function() {
        console.log("üîÑ Meiro Better WF [DELETE]: Initializing delete button focus functionality");
        let intervalId = null;

        function focusDeleteButton() {
            const deleteButton = document.querySelector('[data-testid="confirm-modal-delete-button"]');
            if (deleteButton) {
                deleteButton.focus();
                console.log('‚úÖ Meiro Better WF [DELETE]: Delete button was focused');

                // Stop interval after successful focus
                if (intervalId) {
                    clearInterval(intervalId);
                    const index = activeIntervals.indexOf(intervalId);
                    if (index > -1) activeIntervals.splice(index, 1);
                    intervalId = null;
                }
            }
        }

        function tryFocusDeleteButton() {
            console.log("üîÑ Meiro Better WF [DELETE]: Starting delete button focus attempts");
            if (intervalId) {
                clearInterval(intervalId);
                const index = activeIntervals.indexOf(intervalId);
                if (index > -1) activeIntervals.splice(index, 1);
            }

            intervalId = setInterval(focusDeleteButton, 50);
            activeIntervals.push(intervalId);

            // Stop after 2 seconds if unsuccessful
            setTimeout(() => {
                if (intervalId) {
                    console.log("‚ö†Ô∏è Meiro Better WF [DELETE]: Timeout reached, stopping focus attempts");
                    clearInterval(intervalId);
                    const index = activeIntervals.indexOf(intervalId);
                    if (index > -1) activeIntervals.splice(index, 1);
                    intervalId = null;
                }
            }, 2000);
        }

        const modalObserver = new MutationObserver((mutations) => {
            for (let mutation of mutations) {
                for (let node of mutation.addedNodes) {
                    if (node.nodeType === 1 && node.querySelector('[data-testid="confirm-modal-delete-button"]')) {
                        console.log("‚úÖ Meiro Better WF [DELETE]: Delete modal detected, attempting to focus button");
                        tryFocusDeleteButton();
                    }
                }
            }
        });

        modalObserver.observe(document.body, { childList: true, subtree: true });
        console.log("‚úÖ Meiro Better WF [DELETE]: Modal observer set up successfully");
    })();

    console.log("üöÄ Meiro Better WF: All functionality initialized successfully");
})();
