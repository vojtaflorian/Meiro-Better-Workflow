// ==UserScript==
// @name         Meiro Better Workflow
// @namespace    http://tampermonkey.net/
// @version      2025-07-16
// @description  Meiro Better Workflow - fixed sort button functionality
// @author       Vojta Florian
// @match        *.meiro.io/*
// @match        *.meiro.io/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=meiro.io
// @downloadURL  https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @updateURL    https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @grant        none
// ==/UserScript==

(function () {
    'use strict';

    // Global storage for cleanup
    let activeIntervals = [];

    // Cleanup on page unload to prevent memory leaks
    window.addEventListener('beforeunload', () => {
        activeIntervals.forEach(id => clearInterval(id));
        activeIntervals = [];
    });

    //***********************************************************
    // Automatick√© ≈ôazen√≠ na seznamech od naposledy editovan√Ωch
    function clickSortButton() {
        console.log("Meiro Better WF: Hled√°m Modified tlaƒç√≠tko...");

        // Najdeme tlaƒç√≠tka obsahuj√≠c√≠ text "Modified" nebo podobn√Ω
        const allButtons = document.querySelectorAll('button');
        console.log(`Meiro Better WF: Nalezeno ${allButtons.length} tlaƒç√≠tek celkem`);

        // Hled√°me tlaƒç√≠tko obsahuj√≠c√≠ "Modified" v textu
        let targetButton = null;
        const searchTerms = ['modified', 'upraveno', 'zmƒõnƒõno', 'modified at'];

        allButtons.forEach((btn, index) => {
            const text = btn.textContent.trim().toLowerCase();
            console.log(`Meiro Better WF: Tlaƒç√≠tko ${index}: "${btn.textContent.trim()}"`);

            // Zkontroluj jestli obsahuje hledan√Ω text
            if (searchTerms.some(term => text.includes(term))) {
                targetButton = btn;
                console.log(`‚úÖ Meiro Better WF: Nalezeno ≈ôaz√≠c√≠ tlaƒç√≠tko: "${btn.textContent.trim()}"`);
            }
        });

        if (targetButton) {
            console.log(`Meiro Better WF: Klik√°m na tlaƒç√≠tko: "${targetButton.textContent.trim()}"`);

            try {
                // Prvn√≠ klik pro zmƒõnu ≈ôazen√≠
                targetButton.click();
                console.log("Meiro Better WF: Prvn√≠ klik proveden");

                // Druh√Ω klik po kr√°tk√© pauze pro spr√°vn√© po≈ôad√≠ (nejnovƒõj≈°√≠ naho≈ôe)
                setTimeout(() => {
                    targetButton.click();
                    console.log("Meiro Better WF: Druh√Ω klik proveden - ≈ôazen√≠ podle nejnovƒõj≈°√≠ch");
                }, 300);

                return true; // Success, stop searching
            } catch (error) {
                console.error("Meiro Better WF: Chyba p≈ôi klik√°n√≠:", error);
                return false;
            }
        } else {
            console.log("Meiro Better WF: Modified tlaƒç√≠tko nenalezeno");
            return false; // Continue searching
        }
    }

    // Vylep≈°en√Ω observer s opakovan√Ωm hled√°n√≠m
    function setupSortObserver() {
        let attempts = 0;
        const maxAttempts = 20; // Maxim√°lnƒõ 20 pokus≈Ø (10 sekund)
        let searchInterval;

        function searchForSortButton() {
            attempts++;
            console.log(`Meiro Better WF: Pokus ${attempts}/${maxAttempts} - hled√°m sort tlaƒç√≠tka`);

            const success = clickSortButton();

            if (success) {
                console.log("Meiro Better WF: Sort tlaƒç√≠tko √∫spƒõ≈°nƒõ nalezeno a kliknuto");
                clearInterval(searchInterval);
                const index = activeIntervals.indexOf(searchInterval);
                if (index > -1) activeIntervals.splice(index, 1);
            } else if (attempts >= maxAttempts) {
                console.log("Meiro Better WF: Maxim√°ln√≠ poƒçet pokus≈Ø dosa≈æen, zastavuji hled√°n√≠");
                clearInterval(searchInterval);
                const index = activeIntervals.indexOf(searchInterval);
                if (index > -1) activeIntervals.splice(index, 1);
            }
        }

        // Zaƒçni hledat po kr√°tk√©m zpo≈ædƒõn√≠
        setTimeout(() => {
            searchInterval = setInterval(searchForSortButton, 500);
            activeIntervals.push(searchInterval);

            // Prvn√≠ pokus ihned
            searchForSortButton();
        }, 1000);
    }

    // Spus≈• setup po naƒçten√≠ str√°nky
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupSortObserver);
    } else {
        setupSortObserver();
    }

    //***********************************************************
    // Vyplnƒõn√≠ Send to a Profile ID dynamicky v Campaigns
    const onCampaignPage = window.location.href.includes("meiro.io/channels/emails/campaigns");
    if (!onCampaignPage) {
        console.log('üîí Meiro Better WF: Nespou≈°t√≠m ƒç√°st pro Send to a Profile ID ‚Äì URL neodpov√≠d√°');
    }
    if (onCampaignPage) {
        let userEmail = null;
        const profileIDToFill = "00059461-1b48-f552-3d8c-9f0422f5aef8"; // profil ID pro p≈ôedvyplnƒõn√≠ v Campaigns

        function getUserEmail() {
            let userMenu = document.querySelector("[data-testid='user-menu']");
            if (userMenu) {
                userMenu.click(); // Otev≈ôe u≈æivatelsk√© menu
                setTimeout(() => {
                    let emailElement = document.querySelector(".clYaW"); // Hled√° email u≈æivatele
                    if (emailElement) {
                        userEmail = emailElement.textContent.trim();
                        console.log("Meiro Better WF: Nalezen email u≈æivatele:", userEmail);
                        fillForm(); // Vypln√≠ formul√°≈ô
                    }
                }, 500);
            }
        }

        function simulateReactSelect(input, value) {
            const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
            nativeInputValueSetter.call(input, value);
            input.dispatchEvent(new Event("input", { bubbles: true }));
            input.dispatchEvent(new Event("change", { bubbles: true }));
        }

        function fillForm() {
            if (!userEmail) {
                console.log("Meiro Better WF: ƒåek√°m na z√≠sk√°n√≠ emailu u≈æivatele...");
                return;
            }

            console.log("Meiro Better WF: Vypl≈àuji email:", userEmail);

            // Naj√≠t emailov√Ω select field
            let emailContainer = document.querySelector("[data-testid='send-test-emails-select']");
            if (emailContainer) {
                let emailInput = emailContainer.querySelector(".react-select-redux-field__input input");
                if (emailInput && emailInput.value === "") {
                    console.log("Meiro Better WF: Klik√°m na emailov√Ω input...");
                    emailInput.focus();
                    simulateReactSelect(emailInput, userEmail);

                    setTimeout(() => {
                        let dropdownMenu = document.querySelector(".react-select-redux-field__menu");
                        if (dropdownMenu) {
                            let addEmailOption = dropdownMenu.querySelector("[data-testid='select-field-option']");
                            if (addEmailOption && addEmailOption.textContent.includes(userEmail)) {
                                console.log("Meiro Better WF: Klik√°m na mo≈ænost p≈ôid√°n√≠ emailu:", userEmail);
                                addEmailOption.click();
                            }
                        }
                    }, 500);
                }
            } else {
                console.log("Meiro Better WF: Emailov√Ω input nenalezen.");
            }

            // Naj√≠t input pro Profile ID a spr√°vnƒõ ho vyplnit
            let profileInput = document.querySelector("input[data-testid='send-test-emails-profile-id']");
            if (profileInput && profileInput.value !== profileIDToFill) {
                console.log("Meiro Better WF: Vypl≈àuji Profile ID...");
                simulateReactSelect(profileInput, profileIDToFill);
            }
        }

        // Po naƒçten√≠ str√°nky zkusit z√≠skat email
        setTimeout(getUserEmail, 1000);

        // Improved interval with max attempts to prevent infinite polling
        let attempts = 0;
        let checkInterval = setInterval(() => {
            attempts++;
            fillForm();
            if (document.querySelector(".react-select-redux-field__multi-value") &&
                document.querySelector("input[data-testid='send-test-emails-profile-id']").value === profileIDToFill) {
                clearInterval(checkInterval);
                console.log("Meiro Better WF: Formul√°≈ô √∫spƒõ≈°nƒõ vyplnƒõn.");
            } else if (attempts > 30) { // Stop after 30 seconds
                clearInterval(checkInterval);
                console.log("Meiro Better WF: Timeout p≈ôi vypl≈àov√°n√≠ formul√°≈ôe.");
            }
        }, 1000);
        activeIntervals.push(checkInterval);
    }

    //***********************************************************

    //***********************************************************
    // Funkce pro sledov√°n√≠ textarea elementu a v√Ωpoƒçet velikosti obsahu editoru
    function monitorTextarea() {
        // Zkontrolujeme, zda aktu√°ln√≠ URL obsahuje po≈æadovanou cestu
        if (!window.location.href.includes("meiro.io/channels/emails/campaigns")) {
            console.log('üîí Meiro Better WF: HTML size Skript nen√≠ spu≈°tƒõn, URL neodpov√≠d√° po≈æadovan√©mu vzoru.');
            return; // Skript se nespust√≠, pokud URL neodpov√≠d√°
        }

        console.log("üîé Funkce pro monitorov√°n√≠ textarea spu≈°tƒõna...");

        const textareaElement = document.querySelector('textarea.ace_text-input');

        // Vytvo≈ôen√≠ nov√©ho divu pro zobrazen√≠ velikosti, pokud je≈°tƒõ neexistuje
        let sizeDisplayElement = document.getElementById('size-display');
        if (!sizeDisplayElement) {
            sizeDisplayElement = document.createElement('div');
            sizeDisplayElement.id = 'size-display';
            sizeDisplayElement.style.position = 'fixed';
            sizeDisplayElement.style.bottom = '10px';
            sizeDisplayElement.style.right = '10px';
            sizeDisplayElement.style.padding = '10px';
            sizeDisplayElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
            sizeDisplayElement.style.color = 'white';
            sizeDisplayElement.style.borderRadius = '5px';
            sizeDisplayElement.style.fontSize = '14px';
            sizeDisplayElement.style.zIndex = '10000';
            document.body.appendChild(sizeDisplayElement); // P≈ôid√°me div na str√°nku
        }

        if (textareaElement) {
            // Najdeme nejbli≈æ≈°√≠ Ace Editor
            const aceEditorElement = textareaElement.closest('.ace_editor');

            if (aceEditorElement && window.ace) {
                // Z√≠sk√°n√≠ instance Ace Editoru
                const aceEditor = window.ace.edit(aceEditorElement);

                // Z√≠sk√°n√≠ kompletn√≠ho obsahu editoru
                const textContent = aceEditor.getValue();

                if (textContent.length > 0) {
                    // P≈ôevod textu na bajty pomoc√≠ TextEncoder (UTF-8) s fallback
                    let sizeInBytes;
                    try {
                        sizeInBytes = new TextEncoder().encode(textContent).length;
                    } catch (e) {
                        // Fallback pro star≈°√≠ prohl√≠≈æeƒçe
                        sizeInBytes = textContent.length * 2; // Aproximace pro UTF-8
                    }
                    const sizeInKB = (sizeInBytes / 1024).toFixed(2);
                    console.log(`‚úÖ  Meiro Better WF: Ace Editor nalezen. Velikost obsahu: ${sizeInKB} KB`);

                    // Zobrazen√≠ velikosti v divu
                    sizeDisplayElement.innerHTML = `Velikost obsahu: ${sizeInKB} KB`;
                } else {
                    console.log('‚úÖ  Meiro Better WF: Ace Editor nalezen, ale obsah je pr√°zdn√Ω.');
                    sizeDisplayElement.innerHTML = "Velikost obsahu: 0 KB";
                }
            } else {
                console.log('‚ö†Ô∏è  Meiro Better WF: Ace Editor nebyl nalezen, poƒç√≠t√°m jen textarea.');
                const textContent = textareaElement.value;
                let sizeInBytes;
                try {
                    sizeInBytes = new TextEncoder().encode(textContent).length;
                } catch (e) {
                    sizeInBytes = textContent.length * 2;
                }
                const sizeInKB = (sizeInBytes / 1024).toFixed(2);
                console.log(`‚úÖ  Meiro Better WF: Velikost obsahu textarea: ${sizeInKB} KB`);

                // Zobrazen√≠ velikosti v divu
                sizeDisplayElement.innerHTML = `Velikost obsahu: ${sizeInKB} KB`;
            }
        } else {
            console.log('‚ùå  Meiro Better WF: Textarea nenalezen.');
            sizeDisplayElement.innerHTML = "Velikost obsahu: 0 KB";
        }
    }

    // Start monitoring with cleanup tracking
    const monitorInterval = setInterval(monitorTextarea, 3000);
    activeIntervals.push(monitorInterval);

    //********************************** Funkce pro aplikaci styl≈Ø **********************************
    // Funkce pro p≈ôid√°n√≠ styl≈Ø do hlaviƒçky str√°nky
    function addStyles() {
        console.log("Meiro Better WF: P≈ôid√°v√°m styly...");

        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = `
        @media (max-width: 1250px) {
            .dyn_width_small div div section{
                max-width: 90% !important;
                width: 90% !important;
            }
        }

        @media (min-width: 1320px) {
            .dyn_width_large div div section{
                min-width: 95% !important;
            }
        }

        .max-width-92 { min-width: 92% !important; }
        .max-width-89 { min-width: 89% !important; }

        .flex-730 { flex: 0 0 730px; }
        .flex-500 { flex: 0 0 500px; }
        .TextInput_wrapper__6i7yo .TextInput_row__J20k3 .TextInput_warningWrapper__20GtL {
            min-width: 450px !important;
        }
        .width-auto-content { width: -webkit-fill-available; max-width: -webkit-fill-available; }
        .EmailEditor_emailEditor__18vqj { width: auto !important; }
        .wrapper { max-width: 1600px !important; }
        .files .scrollable.files-content {
            max-height: 350px !important;
        }
        /*aktivni*/
        .width-fill-content { width: -webkit-fill-available !important; max-width: -webkit-fill-available !important; flex: auto !important;}
        .width-auto { width: auto !important;}
        .flex-auto { flex: auto !important; }
    `;
        document.head.appendChild(style);
        console.log("Meiro Better WF: Styly √∫spƒõ≈°nƒõ p≈ôid√°ny.");
    }

    // Funkce pro p≈ôid√°n√≠ nov√Ωch t≈ô√≠d
    function addClasses() {
        console.log("Meiro Better WF: Hled√°m prvky pro p≈ôid√°n√≠ t≈ô√≠d...");

        const classMap = {
            'content-wrap': ['width-fill-content'],
            'sm6GI': ['width-fill-content'], // segments
            '_9rPmH': ['width-fill-content'], // segments
            'ENn0I': ['width-fill-content'], // channels hlaviƒçka
            '_748bX': ['width-fill-content'], // popup-banners hlaviƒçka
            'yHmIT': ['width-fill-content'], // channels/emails/campaigns hlaviƒçka
            'box-border': ['width-auto']
        };

        let elementsUpdated = 0;

        Object.entries(classMap).forEach(([targetClass, newClasses]) => {
            document.querySelectorAll('.' + targetClass).forEach(element => {
                newClasses.forEach(newClass => {
                    if (!element.classList.contains(newClass)) {
                        element.classList.add(newClass);
                        elementsUpdated++;
                    }
                });
            });
        });

        console.log(`Meiro Better WF: P≈ôid√°ny t≈ô√≠dy u ${elementsUpdated} prvk≈Ø.`);
    }

    // Zaji≈°tƒõn√≠, ≈æe skript bƒõ≈æ√≠ po naƒçten√≠ str√°nky
    (function init() {
        console.log("Meiro Better WF: Spou≈°t√≠m skript...");

        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", () => {
                console.log("Meiro Better WF: DOMContentLoaded detekov√°no");
                addStyles();
                addClasses();
            });
        } else {
            console.log("Meiro Better WF: Dokument je ji≈æ naƒçten, prov√°d√≠m akce");
            addStyles();
            addClasses();
        }
    })();

    // Sleduje zmƒõny v DOM a aplikuje t≈ô√≠dy na novƒõ p≈ôidan√© prvky
    const observer2 = new MutationObserver(() => {
        console.log("Meiro Better WF: Detekov√°na zmƒõna v DOM, znovu aplikuji t≈ô√≠dy...");
        addClasses();
    });

    observer2.observe(document.body, { childList: true, subtree: true });

    //***********************************************************
    // ******************** CTA DELETE button v popupu, v≈ædy aktivn√≠ pro "enter" **************************
    (function() {
        let intervalId = null;

        function focusDeleteButton() {
            const deleteButton = document.querySelector('[data-testid="confirm-modal-delete-button"]');
            if (deleteButton) {
                deleteButton.focus();
                console.log('Meiro Better WF: Tlaƒç√≠tko Delete bylo fokusov√°no.');

                // Stop interval after successful focus
                if (intervalId) {
                    clearInterval(intervalId);
                    const index = activeIntervals.indexOf(intervalId);
                    if (index > -1) activeIntervals.splice(index, 1);
                    intervalId = null;
                }
            }
        }

        function tryFocusDeleteButton() {
            if (intervalId) {
                clearInterval(intervalId);
                const index = activeIntervals.indexOf(intervalId);
                if (index > -1) activeIntervals.splice(index, 1);
            }

            intervalId = setInterval(focusDeleteButton, 50);
            activeIntervals.push(intervalId);

            // Stop after 2 seconds if unsuccessful
            setTimeout(() => {
                if (intervalId) {
                    clearInterval(intervalId);
                    const index = activeIntervals.indexOf(intervalId);
                    if (index > -1) activeIntervals.splice(index, 1);
                    intervalId = null;
                }
            }, 2000);
        }

        const modalObserver = new MutationObserver((mutations) => {
            for (let mutation of mutations) {
                for (let node of mutation.addedNodes) {
                    if (node.nodeType === 1 && node.querySelector('[data-testid="confirm-modal-delete-button"]')) {
                        tryFocusDeleteButton();
                    }
                }
            }
        });

        modalObserver.observe(document.body, { childList: true, subtree: true });
    })();
})();
