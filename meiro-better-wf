// ==UserScript==
// @name         Meiro Better Workflow 
// @namespace    http://tampermonkey.net/
// @version      2025-03-20_3
// @description  Meiro Better Workflow 
// @author       Vojta Florian
// @match        *.meiro.io/*
// @match        *.meiro.io/*
// @icon         https://www.google.com/s2/favicons?sz=64&domain=meiro.io
// @downloadURL  https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @updateURL    https://raw.githubusercontent.com/vojtaflorian/Meiro-Better-Workflow/refs/heads/main/meiro-better-wf
// @grant        none
// ==/UserScript==

(function () {
    'use strict';
    //***********************************************************
    // Automatick√© ≈ôazen√≠ na seznamech od naposledy editovan√Ωch
    function clickSortButton() {
        // Najdeme v≈°echna tlaƒç√≠tka s t≈ô√≠dou 'SjcAn'
        let buttons = document.querySelectorAll("button.SjcAn");

        // Hled√°me tlaƒç√≠tko, kter√© obsahuje text "Modified"
        let targetButton = Array.from(buttons).find(btn => btn.textContent.trim().toLowerCase().includes("modified"));

        if (targetButton) {
            console.log("Meiro Better WF: Tlaƒç√≠tko nalezeno, klik√°m dvakr√°t...");
            targetButton.click(); // Prvn√≠ klik (obr√°cen√© po≈ôad√≠)
            targetButton.click(); // Druh√Ω klik (spr√°vn√© po≈ôad√≠)
        } else {
            console.log("Meiro Better WF: Tlaƒç√≠tko obsahuj√≠c√≠ 'Modified' nenalezeno.");
        }
    }

    // Sledujeme, kdy se prvek objev√≠ na str√°nce
    let observer3 = new MutationObserver(() => {
        if (document.querySelector("button.SjcAn")) {
            clickSortButton();
            observer3.disconnect(); // P≈ôestaneme sledovat zmƒõny
        }
    });

    // Spust√≠me sledov√°n√≠ cel√©ho <body>
    observer3.observe(document.body, { childList: true, subtree: true });   
//***********************************************************
// Vyplnƒõn√≠ Send to a Profile ID dynamicky v Campaigns
if (!window.location.href.includes("meiro.io/channels/emails/campaigns")) {
        console.log('üîí Meiro Better WF: Skript nen√≠ spu≈°tƒõn, URL neodpov√≠d√° po≈æadovan√©mu vzoru.');
        return; // Skript se nespust√≠, pokud URL neodpov√≠d√°
    }

    let userEmail = null;
    const profileIDToFill = "00046ff9-a1cc-16ca-cc7d-f02f6ff6b40a";

    function getUserEmail() {
        let userMenu = document.querySelector("[data-testid='user-menu']");
        if (userMenu) {
            userMenu.click(); // Otev≈ôe u≈æivatelsk√© menu
            setTimeout(() => {
                let emailElement = document.querySelector(".clYaW"); // Hled√° email u≈æivatele
                if (emailElement) {
                    userEmail = emailElement.textContent.trim();
                    console.log("Meiro Better WF: Nalezen email u≈æivatele:", userEmail);
                    fillForm(); // Vypln√≠ formul√°≈ô
                }
            }, 500);
        }
    }

    function simulateReactSelect(input, value) {
        const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
        nativeInputValueSetter.call(input, value);
        input.dispatchEvent(new Event("input", { bubbles: true }));
        input.dispatchEvent(new Event("change", { bubbles: true }));
    }

    function fillForm() {
        if (!userEmail) {
            console.log("Meiro Better WF: ƒåek√°m na z√≠sk√°n√≠ emailu u≈æivatele...");
            return;
        }

        console.log("Meiro Better WF: Vypl≈àuji email:", userEmail);

        // Naj√≠t emailov√Ω select field
        let emailContainer = document.querySelector("[data-testid='send-test-emails-select']");
        if (emailContainer) {
            let emailInput = emailContainer.querySelector(".react-select-redux-field__input input");
            if (emailInput && emailInput.value === "") {
                console.log("Meiro Better WF: Klik√°m na emailov√Ω input...");
                emailInput.focus();
                simulateReactSelect(emailInput, userEmail);

                setTimeout(() => {
                    let dropdownMenu = document.querySelector(".react-select-redux-field__menu");
                    if (dropdownMenu) {
                        let addEmailOption = dropdownMenu.querySelector("[data-testid='select-field-option']");
                        if (addEmailOption && addEmailOption.textContent.includes(userEmail)) {
                            console.log("Meiro Better WF: Klik√°m na mo≈ænost p≈ôid√°n√≠ emailu:", userEmail);
                            addEmailOption.click();
                        }
                    }
                }, 500);
            }
        } else {
            console.log("Meiro Better WF: Emailov√Ω input nenalezen.");
        }

        // Naj√≠t input pro Profile ID a spr√°vnƒõ ho vyplnit
        let profileInput = document.querySelector("input[data-testid='send-test-emails-profile-id']");
        if (profileInput && profileInput.value !== profileIDToFill) {
            console.log("Meiro Better WF: Vypl≈àuji Profile ID...");
            simulateReactSelect(profileInput, profileIDToFill);
        }
    }

    // Po naƒçten√≠ str√°nky zkusit z√≠skat email
    setTimeout(getUserEmail, 1000);

    // Opakovanƒõ zkou≈°et vyplnƒõn√≠ ka≈ædou sekundu, dokud nen√≠ √∫spƒõ≈°n√©
    let checkInterval = setInterval(() => {
        fillForm();
        if (document.querySelector(".react-select-redux-field__multi-value") &&
            document.querySelector("input[data-testid='send-test-emails-profile-id']").value === profileIDToFill) {
            clearInterval(checkInterval);
            console.log("Meiro Better WF: Formul√°≈ô √∫spƒõ≈°nƒõ vyplnƒõn.");
        }
    }, 1000);
//***********************************************************
// Funkce pro sledov√°n√≠ textarea elementu a v√Ωpoƒçet velikosti obsahu editoru
function monitorTextarea() {
    // Zkontrolujeme, zda aktu√°ln√≠ URL obsahuje po≈æadovanou cestu
    if (!window.location.href.includes("meiro.io/channels/emails/campaigns")) {
        console.log('üîí Meiro Better WF: Skript nen√≠ spu≈°tƒõn, URL neodpov√≠d√° po≈æadovan√©mu vzoru.');
        return; // Skript se nespust√≠, pokud URL neodpov√≠d√°
    }

    console.log("üîé Funkce pro monitorov√°n√≠ textarea spu≈°tƒõna...");

    const textareaElement = document.querySelector('textarea.ace_text-input');

    // Vytvo≈ôen√≠ nov√©ho divu pro zobrazen√≠ velikosti, pokud je≈°tƒõ neexistuje
    let sizeDisplayElement = document.getElementById('size-display');
    if (!sizeDisplayElement) {
        sizeDisplayElement = document.createElement('div');
        sizeDisplayElement.id = 'size-display';
        sizeDisplayElement.style.position = 'fixed';
        sizeDisplayElement.style.bottom = '10px';
        sizeDisplayElement.style.right = '10px';
        sizeDisplayElement.style.padding = '10px';
        sizeDisplayElement.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        sizeDisplayElement.style.color = 'white';
        sizeDisplayElement.style.borderRadius = '5px';
        sizeDisplayElement.style.fontSize = '14px';
        document.body.appendChild(sizeDisplayElement); // P≈ôid√°me div na str√°nku
    }

    if (textareaElement) {
        // Najdeme nejbli≈æ≈°√≠ Ace Editor
        const aceEditorElement = textareaElement.closest('.ace_editor');

        if (aceEditorElement && window.ace) {
            // Z√≠sk√°n√≠ instance Ace Editoru
            const aceEditor = window.ace.edit(aceEditorElement);

            // Z√≠sk√°n√≠ kompletn√≠ho obsahu editoru
            const textContent = aceEditor.getValue();

            if (textContent.length > 0) {
                // P≈ôevod textu na bajty pomoc√≠ TextEncoder (UTF-8)
                const sizeInBytes = new TextEncoder().encode(textContent).length;
                const sizeInKB = (sizeInBytes / 1024).toFixed(2);
                console.log(`‚úÖ  Meiro Better WF: Ace Editor nalezen. Velikost obsahu: ${sizeInKB} KB`);

                // Zobrazen√≠ velikosti v divu
                sizeDisplayElement.innerHTML = `Velikost obsahu: ${sizeInKB} KB`;
            } else {
                console.log('‚úÖ  Meiro Better WF: Ace Editor nalezen, ale obsah je pr√°zdn√Ω.');
                sizeDisplayElement.innerHTML = "Velikost obsahu: 0 KB";
            }
        } else {
            console.log('‚ö†Ô∏è  Meiro Better WF: Ace Editor nebyl nalezen, poƒç√≠t√°m jen textarea.');
            const textContent = textareaElement.value;
            const sizeInBytes = new TextEncoder().encode(textContent).length;
            const sizeInKB = (sizeInBytes / 1024).toFixed(2);
            console.log(`‚úÖ  Meiro Better WF: Velikost obsahu textarea: ${sizeInKB} KB`);

            // Zobrazen√≠ velikosti v divu
            sizeDisplayElement.innerHTML = `Velikost obsahu: ${sizeInKB} KB`;
        }
    } else {
        console.log('‚ùå  Meiro Better WF: Textarea nenalezen.');
        sizeDisplayElement.innerHTML = "Velikost obsahu: 0 KB";
    }
}

setInterval(monitorTextarea, 3000);

//********************************** Funkce pro aplikaci styl≈Ø **********************************
// Funkce pro p≈ôid√°n√≠ styl≈Ø do hlaviƒçky str√°nky
function addStyles() {
    console.log("Meiro Better WF: P≈ôid√°v√°m styly...");

    var style = document.createElement('style');
    style.type = 'text/css';
    style.innerHTML = `
        @media (max-width: 1250px) {
            .dyn_width_small div div section{
                max-width: 90% !important;
                width: 90% !important;
            }
        }

        @media (min-width: 1320px) {
            .dyn_width_large div div section{
                min-width: 95% !important;
            }
        }

        .max-width-92 { min-width: 92% !important; }
        .max-width-89 { min-width: 89% !important; }
        .
        .flex-730 { flex: 0 0 730px; }
        .flex-500 { flex: 0 0 500px; }
        .TextInput_wrapper__6i7yo .TextInput_row__J20k3 .TextInput_warningWrapper__20GtL {
            min-width: 450px !important;
        }
        .width-auto-content { width: -webkit-fill-available; max-width: -webkit-fill-available; }
        .EmailEditor_emailEditor__18vqj { width: auto !important; }
        .wrapper { max-width: 1600px !important; }
        .files .scrollable.files-content {
            max-height: 350px !important;
        }
        /*aktivni*/
        .width-auto-content { width: -webkit-fill-available !important; max-width: -webkit-fill-available !important; flex: auto !important;}
        flex-auto { flex: auto !important; }
    `;
    document.head.appendChild(style);
    console.log("Meiro Better WF: Styly √∫spƒõ≈°nƒõ p≈ôid√°ny.");
}

// Funkce pro p≈ôid√°n√≠ nov√Ωch t≈ô√≠d
function addClasses() {
    console.log("Meiro Better WF: Hled√°m prvky pro p≈ôid√°n√≠ t≈ô√≠d...");

    const classMap = {
        'content-wrap': ['width-auto-content'],
        'sm6GI': ['width-auto-content'], // segments
        '_9rPmH': ['width-auto-content'], // segments
        'ENn0I': ['width-auto-content'], // channels hlaviƒçka
        '_748bX': ['width-auto-content'], // popup-banners hlaviƒçka
        'yHmIT': ['width-auto-content'] // channels/emails/campaigns hlaviƒçka
        //'_9rPmH': ['width-auto-content', 'flex-auto'] // segments
    };

    let elementsUpdated = 0;

    Object.entries(classMap).forEach(([targetClass, newClasses]) => {
        document.querySelectorAll('.' + targetClass).forEach(element => {
            newClasses.forEach(newClass => {
                if (!element.classList.contains(newClass)) {
                    element.classList.add(newClass);
                    elementsUpdated++;
                }
            });
        });
    });

    console.log(`Meiro Better WF: P≈ôid√°ny t≈ô√≠dy u ${elementsUpdated} prvk≈Ø.`);
}

// Zaji≈°tƒõn√≠, ≈æe skript bƒõ≈æ√≠ po naƒçten√≠ str√°nky
(function init() {
    console.log("Meiro Better WF: Spou≈°t√≠m skript...");

    if (document.readyState === "loading") {
        document.addEventListener("DOMContentLoaded", () => {
            console.log("Meiro Better WF: DOMContentLoaded detekov√°no");
            addStyles();
            addClasses();
        });
    } else {
        console.log("Meiro Better WF: Dokument je ji≈æ naƒçten, prov√°d√≠m akce");
        addStyles();
        addClasses();
    }
})();

// Sleduje zmƒõny v DOM a aplikuje t≈ô√≠dy na novƒõ p≈ôidan√© prvky
const observer2 = new MutationObserver(() => {
    console.log("Meiro Better WF: Detekov√°na zmƒõna v DOM, znovu aplikuji t≈ô√≠dy...");
    addClasses();
});

observer2.observe(document.body, { childList: true, subtree: true });
    //***********************************************************
    // ******************** CTA DELETE button v popupu, v≈ædy aktivn√≠ pro "enter" **************************
    (function() {
        let intervalId = null;

        function focusDeleteButton() {
            const deleteButton = document.querySelector('[data-testid="confirm-modal-delete-button"]');
            if (deleteButton) {
                deleteButton.focus();
                console.log('Meiro Better WF: Tlaƒç√≠tko Delete bylo fokusov√°no.');
            }
        }

        function tryFocusDeleteButton() {
            clearInterval(intervalId);
            intervalId = setInterval(focusDeleteButton, 50);
        }

        const modalObserver = new MutationObserver((mutations) => {
            for (let mutation of mutations) {
                for (let node of mutation.addedNodes) {
                    if (node.nodeType === 1 && node.querySelector('[data-testid="confirm-modal-delete-button"]')) {
                        tryFocusDeleteButton();
                    }
                }
            }
        });

        modalObserver.observe(document.body, { childList: true, subtree: true });
    })();
})();
